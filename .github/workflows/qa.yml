name: QA Automation

permissions:
  contents: read
  pull-requests: write

on:
  push:
    branches:
      - main
      - bug-fixing
  pull_request:

jobs:
  test:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: server
    env: 
        "JWT_SECRET_KEY" : "${{ secrets.JWT_SECRET_KEY }}"
        "SPOTIFY_CLIENT_ID" : "${{ secrets.SPOTIFY_CLIENT_ID }}"
        "SPOTIFY_CLIENT_SECRET" : "${{ secrets.SPOTIFY_CLIENT_SECRET }}"
        "AUTH_REDIRECT_URI" : "${{ secrets.AUTH_REDIRECT_URI }}"
        "SALT" : "${{ secrets.SALT }}"
        "MUSIXMATCH_API_KEY" : "${{ secrets.MUSIXMATCH_API_KEY }}"
        "GOOGLE_CLIENT_ID" : "${{ secrets.GOOGLE_CLIENT_ID }}"
        "GOOGLE_CLIENT_SECRET" : "${{ secrets.GOOGLE_CLIENT_SECRET }}"
        "GOOGLE_CLIENT_SECRET_FILE" : "${{ secrets.GOOGLE_CLIENT_SECRET_FILE }}"
        "APPLE_DEVELOPER_TOKEN" : "${{ secrets.APPLE_DEVELOPER_TOKEN }}"
        "DEBUG_MODE" : "${{ secrets.DEBUG_MODE }}"
        "AUTH_CLIENT_ID" : "${{ secrets.AUTH_CLIENT_ID }}"
        "AUTH_CLIENT_SECRET" : "${{ secrets.AUTH_CLIENT_SECRET }}"
        "APP_SECRET_KEY" : "${{ secrets.APP_SECRET_KEY }}"
        "GOOGLE_SCOPE_LIST" : "${{ secrets.GOOGLE_SCOPE_LIST }}"
        "FIREBASECONFIG_APIKEY" : "${{ secrets.FIREBASECONFIG_APIKEY }}"
        "FIREBASECONFIG_AUTHDOMAIN" : "${{ secrets.FIREBASECONFIG_AUTHDOMAIN }}"
        "FIREBASECONFIG_PROJECTID" : "${{ secrets.FIREBASECONFIG_PROJECTID }}"
        "FIREBASECONFIG_STORAGEBUCKET" : "${{ secrets.FIREBASECONFIG_STORAGEBUCKET }}"
        "FIREBASECONFIG_MESSAGINGSENDERID" : "${{ secrets.FIREBASECONFIG_MESSAGINGSENDERID }}"
        "FIREBASECONFIG_APPID" : "${{ secrets.FIREBASECONFIG_APPID }}"
        "FIREBASECONFIG_MEASUREMENTID" : "${{ secrets.FIREBASECONFIG_MEASUREMENTID }}"
        "FIREBASE_CC_JSON" : "${{ secrets.FIREBASE_CC_JSON }}"
    steps:
      # 1. Checkout the repository
      - name: Checkout Repository
        uses: actions/checkout@v2

      # 2. Set up Python environment
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.9'
        
      # 3. Cache pip dependencies
      - name: Cache pip
        uses: actions/cache@v4.2.3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      # 4. Recreate critical secret files from GitHub Secrets
      - name: Set up secret files
        run: |
          # Create directories if they don't exist
          mkdir -p server/keys
          mkdir -p server/database
          
          # Write the secret files
          echo "${{ secrets.TEST }}"

      # 5. Install project dependencies
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      # 6. Lint the code
      - name: Lint Code
        run: |
          pip install flake8
          flake8 .

      # 7. Run tests
      - name: Run tests with coverage
        run: |
          pip install pytest pytest-cov
          export PYTHONPATH=${{ github.workspace }}/server
          pytest --cov=server --cov-branch --cov-report=xml --cov-fail-under=80


      # 9. List files for debugging to ensure coverage.xml exists
      - name: List files for debug
        run: |
          find . -type f

      # 10. Upload the coverage report as an artifact
      - name: Upload Coverage Report
        uses: actions/upload-artifact@v4.6.2
        with:
          name: coverage-report
          path: server/coverage.xml